// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: env_service.proto

#include "env_service.pb.h"
#include "env_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace environmentdata {

static const char* EnvironmentData_method_names[] = {
  "/environmentdata.EnvironmentData/GetData",
  "/environmentdata.EnvironmentData/UpdateCrater",
  "/environmentdata.EnvironmentData/GetRoutePoints",
};

std::unique_ptr< EnvironmentData::Stub> EnvironmentData::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EnvironmentData::Stub> stub(new EnvironmentData::Stub(channel, options));
  return stub;
}

EnvironmentData::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetData_(EnvironmentData_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_UpdateCrater_(EnvironmentData_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRoutePoints_(EnvironmentData_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::environmentdata::GetDataResponse>* EnvironmentData::Stub::GetDataRaw(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::environmentdata::GetDataResponse>::Create(channel_.get(), rpcmethod_GetData_, context, request);
}

void EnvironmentData::Stub::async::GetData(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest* request, ::grpc::ClientReadReactor< ::environmentdata::GetDataResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::environmentdata::GetDataResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::environmentdata::GetDataResponse>* EnvironmentData::Stub::AsyncGetDataRaw(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::environmentdata::GetDataResponse>::Create(channel_.get(), cq, rpcmethod_GetData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::environmentdata::GetDataResponse>* EnvironmentData::Stub::PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::environmentdata::GetDataResponse>::Create(channel_.get(), cq, rpcmethod_GetData_, context, request, false, nullptr);
}

::grpc::Status EnvironmentData::Stub::UpdateCrater(::grpc::ClientContext* context, const ::environmentdata::Crater& request, ::environmentdata::CraterArea* response) {
  return ::grpc::internal::BlockingUnaryCall< ::environmentdata::Crater, ::environmentdata::CraterArea, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateCrater_, context, request, response);
}

void EnvironmentData::Stub::async::UpdateCrater(::grpc::ClientContext* context, const ::environmentdata::Crater* request, ::environmentdata::CraterArea* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::environmentdata::Crater, ::environmentdata::CraterArea, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCrater_, context, request, response, std::move(f));
}

void EnvironmentData::Stub::async::UpdateCrater(::grpc::ClientContext* context, const ::environmentdata::Crater* request, ::environmentdata::CraterArea* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCrater_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::environmentdata::CraterArea>* EnvironmentData::Stub::PrepareAsyncUpdateCraterRaw(::grpc::ClientContext* context, const ::environmentdata::Crater& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::environmentdata::CraterArea, ::environmentdata::Crater, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateCrater_, context, request);
}

::grpc::ClientAsyncResponseReader< ::environmentdata::CraterArea>* EnvironmentData::Stub::AsyncUpdateCraterRaw(::grpc::ClientContext* context, const ::environmentdata::Crater& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateCraterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentData::Stub::GetRoutePoints(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints& request, ::environmentdata::RoutePoints* response) {
  return ::grpc::internal::BlockingUnaryCall< ::environmentdata::StartStopPoints, ::environmentdata::RoutePoints, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRoutePoints_, context, request, response);
}

void EnvironmentData::Stub::async::GetRoutePoints(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints* request, ::environmentdata::RoutePoints* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::environmentdata::StartStopPoints, ::environmentdata::RoutePoints, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoutePoints_, context, request, response, std::move(f));
}

void EnvironmentData::Stub::async::GetRoutePoints(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints* request, ::environmentdata::RoutePoints* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoutePoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::environmentdata::RoutePoints>* EnvironmentData::Stub::PrepareAsyncGetRoutePointsRaw(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::environmentdata::RoutePoints, ::environmentdata::StartStopPoints, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRoutePoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::environmentdata::RoutePoints>* EnvironmentData::Stub::AsyncGetRoutePointsRaw(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRoutePointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

EnvironmentData::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentData_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EnvironmentData::Service, ::environmentdata::GetDataRequest, ::environmentdata::GetDataResponse>(
          [](EnvironmentData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::environmentdata::GetDataRequest* req,
             ::grpc::ServerWriter<::environmentdata::GetDataResponse>* writer) {
               return service->GetData(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentData_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentData::Service, ::environmentdata::Crater, ::environmentdata::CraterArea, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::environmentdata::Crater* req,
             ::environmentdata::CraterArea* resp) {
               return service->UpdateCrater(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentData_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentData::Service, ::environmentdata::StartStopPoints, ::environmentdata::RoutePoints, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::environmentdata::StartStopPoints* req,
             ::environmentdata::RoutePoints* resp) {
               return service->GetRoutePoints(ctx, req, resp);
             }, this)));
}

EnvironmentData::Service::~Service() {
}

::grpc::Status EnvironmentData::Service::GetData(::grpc::ServerContext* context, const ::environmentdata::GetDataRequest* request, ::grpc::ServerWriter< ::environmentdata::GetDataResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentData::Service::UpdateCrater(::grpc::ServerContext* context, const ::environmentdata::Crater* request, ::environmentdata::CraterArea* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentData::Service::GetRoutePoints(::grpc::ServerContext* context, const ::environmentdata::StartStopPoints* request, ::environmentdata::RoutePoints* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace environmentdata

