// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: env_service.proto

#include "env_service.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace environmentdata {
template <typename>
PROTOBUF_CONSTEXPR CraterArea::CraterArea(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tileid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CraterAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CraterAreaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CraterAreaDefaultTypeInternal() {}
  union {
    CraterArea _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CraterAreaDefaultTypeInternal _CraterArea_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Position::Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.longitude_)*/ 0

  , /*decltype(_impl_.latitude_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Area::Area(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bottomleft_)*/nullptr
  , /*decltype(_impl_.topright_)*/nullptr} {}
struct AreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AreaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AreaDefaultTypeInternal() {}
  union {
    Area _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AreaDefaultTypeInternal _Area_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Crater::Crater(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.width_)*/ 0

  , /*decltype(_impl_.depth_)*/ 0
} {}
struct CraterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CraterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CraterDefaultTypeInternal() {}
  union {
    Crater _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CraterDefaultTypeInternal _Crater_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetDataRequest::GetDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.area_)*/nullptr
  , /*decltype(_impl_.level_)*/ 0

  , /*decltype(_impl_.datatype_)*/ 0
} {}
struct GetDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDataRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDataRequestDefaultTypeInternal() {}
  union {
    GetDataRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDataRequestDefaultTypeInternal _GetDataRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetDataResponse::GetDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.craters_)*/{}
  , /*decltype(_impl_.tileid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.content_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDataResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDataResponseDefaultTypeInternal() {}
  union {
    GetDataResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDataResponseDefaultTypeInternal _GetDataResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StartStopPoints::StartStopPoints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_)*/nullptr
  , /*decltype(_impl_.end_)*/nullptr} {}
struct StartStopPointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartStopPointsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartStopPointsDefaultTypeInternal() {}
  union {
    StartStopPoints _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartStopPointsDefaultTypeInternal _StartStopPoints_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RoutePoints::RoutePoints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutePointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutePointsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutePointsDefaultTypeInternal() {}
  union {
    RoutePoints _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutePointsDefaultTypeInternal _RoutePoints_default_instance_;
}  // namespace environmentdata
static ::_pb::Metadata file_level_metadata_env_5fservice_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_env_5fservice_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_env_5fservice_2eproto = nullptr;
const ::uint32_t TableStruct_env_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::environmentdata::CraterArea, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::environmentdata::CraterArea, _impl_.tileid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::environmentdata::Position, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::environmentdata::Position, _impl_.longitude_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::Position, _impl_.latitude_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::Area, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::Area, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::environmentdata::Area, _impl_.bottomleft_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::Area, _impl_.topright_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::environmentdata::Crater, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::Crater, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::environmentdata::Crater, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::Crater, _impl_.depth_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::Crater, _impl_.pos_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::environmentdata::GetDataRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::GetDataRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::environmentdata::GetDataRequest, _impl_.area_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::GetDataRequest, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::GetDataRequest, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::GetDataRequest, _impl_.datatype_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::environmentdata::GetDataResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::environmentdata::GetDataResponse, _impl_.tileid_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::GetDataResponse, _impl_.content_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::GetDataResponse, _impl_.craters_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::StartStopPoints, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::StartStopPoints, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::environmentdata::StartStopPoints, _impl_.start_),
    PROTOBUF_FIELD_OFFSET(::environmentdata::StartStopPoints, _impl_.end_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::environmentdata::RoutePoints, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::environmentdata::RoutePoints, _impl_.pos_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::environmentdata::CraterArea)},
        { 9, -1, -1, sizeof(::environmentdata::Position)},
        { 19, 29, -1, sizeof(::environmentdata::Area)},
        { 31, 42, -1, sizeof(::environmentdata::Crater)},
        { 45, 57, -1, sizeof(::environmentdata::GetDataRequest)},
        { 61, -1, -1, sizeof(::environmentdata::GetDataResponse)},
        { 72, 82, -1, sizeof(::environmentdata::StartStopPoints)},
        { 84, -1, -1, sizeof(::environmentdata::RoutePoints)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::environmentdata::_CraterArea_default_instance_._instance,
    &::environmentdata::_Position_default_instance_._instance,
    &::environmentdata::_Area_default_instance_._instance,
    &::environmentdata::_Crater_default_instance_._instance,
    &::environmentdata::_GetDataRequest_default_instance_._instance,
    &::environmentdata::_GetDataResponse_default_instance_._instance,
    &::environmentdata::_StartStopPoints_default_instance_._instance,
    &::environmentdata::_RoutePoints_default_instance_._instance,
};
const char descriptor_table_protodef_env_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021env_service.proto\022\017environmentdata\"\034\n\n"
    "CraterArea\022\016\n\006tileID\030\001 \001(\t\"/\n\010Position\022\021"
    "\n\tlongitude\030\001 \001(\001\022\020\n\010latitude\030\002 \001(\001\"b\n\004A"
    "rea\022-\n\nbottomleft\030\001 \001(\0132\031.environmentdat"
    "a.Position\022+\n\010topright\030\002 \001(\0132\031.environme"
    "ntdata.Position\"N\n\006Crater\022\r\n\005width\030\001 \001(\001"
    "\022\r\n\005depth\030\002 \001(\001\022&\n\003pos\030\003 \001(\0132\031.environme"
    "ntdata.Position\"\177\n\016GetDataRequest\022#\n\004are"
    "a\030\001 \001(\0132\025.environmentdata.Area\022\014\n\004time\030\002"
    " \001(\t\022\r\n\005level\030\003 \001(\005\022+\n\010dataType\030\004 \001(\0162\031."
    "environmentdata.DataType\"\\\n\017GetDataRespo"
    "nse\022\016\n\006tileID\030\001 \001(\t\022\017\n\007content\030\002 \001(\014\022(\n\007"
    "craters\030\003 \003(\0132\027.environmentdata.Crater\"c"
    "\n\017StartStopPoints\022(\n\005start\030\001 \001(\0132\031.envir"
    "onmentdata.Position\022&\n\003end\030\002 \001(\0132\031.envir"
    "onmentdata.Position\"5\n\013RoutePoints\022&\n\003po"
    "s\030\001 \003(\0132\031.environmentdata.Position*&\n\010Da"
    "taType\022\010\n\004ZERO\020\000\022\007\n\003DEM\020\001\022\007\n\003PBF\020\0022\377\001\n\017E"
    "nvironmentData\022P\n\007GetData\022\037.environmentd"
    "ata.GetDataRequest\032 .environmentdata.Get"
    "DataResponse\"\0000\001\022F\n\014UpdateCrater\022\027.envir"
    "onmentdata.Crater\032\033.environmentdata.Crat"
    "erArea\"\000\022R\n\016GetRoutePoints\022 .environment"
    "data.StartStopPoints\032\034.environmentdata.R"
    "outePoints\"\000b\006proto3"
};
static ::absl::once_flag descriptor_table_env_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_env_5fservice_2eproto = {
    false,
    false,
    980,
    descriptor_table_protodef_env_5fservice_2eproto,
    "env_service.proto",
    &descriptor_table_env_5fservice_2eproto_once,
    nullptr,
    0,
    8,
    schemas,
    file_default_instances,
    TableStruct_env_5fservice_2eproto::offsets,
    file_level_metadata_env_5fservice_2eproto,
    file_level_enum_descriptors_env_5fservice_2eproto,
    file_level_service_descriptors_env_5fservice_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_env_5fservice_2eproto_getter() {
  return &descriptor_table_env_5fservice_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_env_5fservice_2eproto(&descriptor_table_env_5fservice_2eproto);
namespace environmentdata {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_env_5fservice_2eproto);
  return file_level_enum_descriptors_env_5fservice_2eproto[0];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class CraterArea::_Internal {
 public:
};

CraterArea::CraterArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:environmentdata.CraterArea)
}
CraterArea::CraterArea(const CraterArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CraterArea* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tileid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tileid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tileid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tileid().empty()) {
    _this->_impl_.tileid_.Set(from._internal_tileid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:environmentdata.CraterArea)
}

inline void CraterArea::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tileid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tileid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tileid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CraterArea::~CraterArea() {
  // @@protoc_insertion_point(destructor:environmentdata.CraterArea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CraterArea::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tileid_.Destroy();
}

void CraterArea::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CraterArea::Clear() {
// @@protoc_insertion_point(message_clear_start:environmentdata.CraterArea)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tileid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CraterArea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tileID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tileid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "environmentdata.CraterArea.tileID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CraterArea::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:environmentdata.CraterArea)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tileID = 1;
  if (!this->_internal_tileid().empty()) {
    const std::string& _s = this->_internal_tileid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "environmentdata.CraterArea.tileID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:environmentdata.CraterArea)
  return target;
}

::size_t CraterArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:environmentdata.CraterArea)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tileID = 1;
  if (!this->_internal_tileid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tileid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CraterArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CraterArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CraterArea::GetClassData() const { return &_class_data_; }


void CraterArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CraterArea*>(&to_msg);
  auto& from = static_cast<const CraterArea&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:environmentdata.CraterArea)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tileid().empty()) {
    _this->_internal_set_tileid(from._internal_tileid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CraterArea::CopyFrom(const CraterArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:environmentdata.CraterArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraterArea::IsInitialized() const {
  return true;
}

void CraterArea::InternalSwap(CraterArea* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tileid_, lhs_arena,
                                       &other->_impl_.tileid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CraterArea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_5fservice_2eproto_getter, &descriptor_table_env_5fservice_2eproto_once,
      file_level_metadata_env_5fservice_2eproto[0]);
}
// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:environmentdata.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:environmentdata.Position)
}

inline void Position::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.longitude_) { 0 }

    , decltype(_impl_.latitude_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:environmentdata.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:environmentdata.Position)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.longitude_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.latitude_) -
      reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.latitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Position::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:environmentdata.Position)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  ::uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_longitude(), target);
  }

  // double latitude = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  ::uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_latitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:environmentdata.Position)
  return target;
}

::size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:environmentdata.Position)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  ::uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 9;
  }

  // double latitude = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  ::uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }


void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:environmentdata.Position)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  ::uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  ::uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:environmentdata.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.latitude_)
      + sizeof(Position::_impl_.latitude_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.longitude_)>(
          reinterpret_cast<char*>(&_impl_.longitude_),
          reinterpret_cast<char*>(&other->_impl_.longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_5fservice_2eproto_getter, &descriptor_table_env_5fservice_2eproto_once,
      file_level_metadata_env_5fservice_2eproto[1]);
}
// ===================================================================

class Area::_Internal {
 public:
  using HasBits = decltype(std::declval<Area>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Area, _impl_._has_bits_);
  static const ::environmentdata::Position& bottomleft(const Area* msg);
  static void set_has_bottomleft(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::environmentdata::Position& topright(const Area* msg);
  static void set_has_topright(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::environmentdata::Position&
Area::_Internal::bottomleft(const Area* msg) {
  return *msg->_impl_.bottomleft_;
}
const ::environmentdata::Position&
Area::_Internal::topright(const Area* msg) {
  return *msg->_impl_.topright_;
}
Area::Area(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:environmentdata.Area)
}
Area::Area(const Area& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Area* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bottomleft_){nullptr}
    , decltype(_impl_.topright_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.bottomleft_ = new ::environmentdata::Position(*from._impl_.bottomleft_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.topright_ = new ::environmentdata::Position(*from._impl_.topright_);
  }
  // @@protoc_insertion_point(copy_constructor:environmentdata.Area)
}

inline void Area::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bottomleft_){nullptr}
    , decltype(_impl_.topright_){nullptr}
  };
}

Area::~Area() {
  // @@protoc_insertion_point(destructor:environmentdata.Area)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Area::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.bottomleft_;
  if (this != internal_default_instance()) delete _impl_.topright_;
}

void Area::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Area::Clear() {
// @@protoc_insertion_point(message_clear_start:environmentdata.Area)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.bottomleft_ != nullptr);
      _impl_.bottomleft_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.topright_ != nullptr);
      _impl_.topright_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Area::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .environmentdata.Position bottomleft = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottomleft(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .environmentdata.Position topright = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_topright(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Area::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:environmentdata.Area)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .environmentdata.Position bottomleft = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bottomleft(this),
        _Internal::bottomleft(this).GetCachedSize(), target, stream);
  }

  // .environmentdata.Position topright = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::topright(this),
        _Internal::topright(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:environmentdata.Area)
  return target;
}

::size_t Area::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:environmentdata.Area)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .environmentdata.Position bottomleft = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bottomleft_);
    }

    // .environmentdata.Position topright = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.topright_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Area::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Area::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Area::GetClassData() const { return &_class_data_; }


void Area::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Area*>(&to_msg);
  auto& from = static_cast<const Area&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:environmentdata.Area)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_bottomleft()->::environmentdata::Position::MergeFrom(
          from._internal_bottomleft());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_topright()->::environmentdata::Position::MergeFrom(
          from._internal_topright());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Area::CopyFrom(const Area& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:environmentdata.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Area::IsInitialized() const {
  return true;
}

void Area::InternalSwap(Area* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Area, _impl_.topright_)
      + sizeof(Area::_impl_.topright_)
      - PROTOBUF_FIELD_OFFSET(Area, _impl_.bottomleft_)>(
          reinterpret_cast<char*>(&_impl_.bottomleft_),
          reinterpret_cast<char*>(&other->_impl_.bottomleft_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Area::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_5fservice_2eproto_getter, &descriptor_table_env_5fservice_2eproto_once,
      file_level_metadata_env_5fservice_2eproto[2]);
}
// ===================================================================

class Crater::_Internal {
 public:
  using HasBits = decltype(std::declval<Crater>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Crater, _impl_._has_bits_);
  static const ::environmentdata::Position& pos(const Crater* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::environmentdata::Position&
Crater::_Internal::pos(const Crater* msg) {
  return *msg->_impl_.pos_;
}
Crater::Crater(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:environmentdata.Crater)
}
Crater::Crater(const Crater& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Crater* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.width_) {}

    , decltype(_impl_.depth_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pos_ = new ::environmentdata::Position(*from._impl_.pos_);
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.depth_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.depth_));
  // @@protoc_insertion_point(copy_constructor:environmentdata.Crater)
}

inline void Crater::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.width_) { 0 }

    , decltype(_impl_.depth_) { 0 }

  };
}

Crater::~Crater() {
  // @@protoc_insertion_point(destructor:environmentdata.Crater)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Crater::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void Crater::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Crater::Clear() {
// @@protoc_insertion_point(message_clear_start:environmentdata.Crater)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pos_ != nullptr);
    _impl_.pos_->Clear();
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.depth_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.depth_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Crater::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // .environmentdata.Position pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Crater::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:environmentdata.Crater)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_width(), target);
  }

  // double depth = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_depth = this->_internal_depth();
  ::uint64_t raw_depth;
  memcpy(&raw_depth, &tmp_depth, sizeof(tmp_depth));
  if (raw_depth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_depth(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .environmentdata.Position pos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:environmentdata.Crater)
  return target;
}

::size_t Crater::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:environmentdata.Crater)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .environmentdata.Position pos = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // double width = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 9;
  }

  // double depth = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_depth = this->_internal_depth();
  ::uint64_t raw_depth;
  memcpy(&raw_depth, &tmp_depth, sizeof(tmp_depth));
  if (raw_depth != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Crater::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Crater::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Crater::GetClassData() const { return &_class_data_; }


void Crater::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Crater*>(&to_msg);
  auto& from = static_cast<const Crater&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:environmentdata.Crater)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pos()->::environmentdata::Position::MergeFrom(
        from._internal_pos());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_depth = from._internal_depth();
  ::uint64_t raw_depth;
  memcpy(&raw_depth, &tmp_depth, sizeof(tmp_depth));
  if (raw_depth != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Crater::CopyFrom(const Crater& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:environmentdata.Crater)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crater::IsInitialized() const {
  return true;
}

void Crater::InternalSwap(Crater* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Crater, _impl_.depth_)
      + sizeof(Crater::_impl_.depth_)
      - PROTOBUF_FIELD_OFFSET(Crater, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Crater::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_5fservice_2eproto_getter, &descriptor_table_env_5fservice_2eproto_once,
      file_level_metadata_env_5fservice_2eproto[3]);
}
// ===================================================================

class GetDataRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDataRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetDataRequest, _impl_._has_bits_);
  static const ::environmentdata::Area& area(const GetDataRequest* msg);
  static void set_has_area(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::environmentdata::Area&
GetDataRequest::_Internal::area(const GetDataRequest* msg) {
  return *msg->_impl_.area_;
}
GetDataRequest::GetDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:environmentdata.GetDataRequest)
}
GetDataRequest::GetDataRequest(const GetDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_) {}

    , decltype(_impl_.area_){nullptr}
    , decltype(_impl_.level_) {}

    , decltype(_impl_.datatype_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.time_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time().empty()) {
    _this->_impl_.time_.Set(from._internal_time(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.area_ = new ::environmentdata::Area(*from._impl_.area_);
  }
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.datatype_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.datatype_));
  // @@protoc_insertion_point(copy_constructor:environmentdata.GetDataRequest)
}

inline void GetDataRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_) {}

    , decltype(_impl_.area_){nullptr}
    , decltype(_impl_.level_) { 0 }

    , decltype(_impl_.datatype_) { 0 }

  };
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.time_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDataRequest::~GetDataRequest() {
  // @@protoc_insertion_point(destructor:environmentdata.GetDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDataRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.time_.Destroy();
  if (this != internal_default_instance()) delete _impl_.area_;
}

void GetDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:environmentdata.GetDataRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.area_ != nullptr);
    _impl_.area_->Clear();
  }
  ::memset(&_impl_.level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.datatype_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.datatype_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .environmentdata.Area area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_area(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "environmentdata.GetDataRequest.time"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .environmentdata.DataType dataType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_datatype(static_cast<::environmentdata::DataType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetDataRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:environmentdata.GetDataRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .environmentdata.Area area = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::area(this),
        _Internal::area(this).GetCachedSize(), target, stream);
  }

  // string time = 2;
  if (!this->_internal_time().empty()) {
    const std::string& _s = this->_internal_time();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "environmentdata.GetDataRequest.time");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_level(), target);
  }

  // .environmentdata.DataType dataType = 4;
  if (this->_internal_datatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_datatype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:environmentdata.GetDataRequest)
  return target;
}

::size_t GetDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:environmentdata.GetDataRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 2;
  if (!this->_internal_time().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_time());
  }

  // .environmentdata.Area area = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.area_);
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_level());
  }

  // .environmentdata.DataType dataType = 4;
  if (this->_internal_datatype() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_datatype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDataRequest::GetClassData() const { return &_class_data_; }


void GetDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDataRequest*>(&to_msg);
  auto& from = static_cast<const GetDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:environmentdata.GetDataRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_time().empty()) {
    _this->_internal_set_time(from._internal_time());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_area()->::environmentdata::Area::MergeFrom(
        from._internal_area());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_datatype() != 0) {
    _this->_internal_set_datatype(from._internal_datatype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDataRequest::CopyFrom(const GetDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:environmentdata.GetDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataRequest::IsInitialized() const {
  return true;
}

void GetDataRequest::InternalSwap(GetDataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.time_, lhs_arena,
                                       &other->_impl_.time_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDataRequest, _impl_.datatype_)
      + sizeof(GetDataRequest::_impl_.datatype_)
      - PROTOBUF_FIELD_OFFSET(GetDataRequest, _impl_.area_)>(
          reinterpret_cast<char*>(&_impl_.area_),
          reinterpret_cast<char*>(&other->_impl_.area_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_5fservice_2eproto_getter, &descriptor_table_env_5fservice_2eproto_once,
      file_level_metadata_env_5fservice_2eproto[4]);
}
// ===================================================================

class GetDataResponse::_Internal {
 public:
};

GetDataResponse::GetDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:environmentdata.GetDataResponse)
}
GetDataResponse::GetDataResponse(const GetDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.craters_){from._impl_.craters_}
    , decltype(_impl_.tileid_) {}

    , decltype(_impl_.content_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tileid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tileid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tileid().empty()) {
    _this->_impl_.tileid_.Set(from._internal_tileid(), _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:environmentdata.GetDataResponse)
}

inline void GetDataResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.craters_){arena}
    , decltype(_impl_.tileid_) {}

    , decltype(_impl_.content_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tileid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tileid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDataResponse::~GetDataResponse() {
  // @@protoc_insertion_point(destructor:environmentdata.GetDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDataResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_craters()->~RepeatedPtrField();
  _impl_.tileid_.Destroy();
  _impl_.content_.Destroy();
}

void GetDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:environmentdata.GetDataResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_craters()->Clear();
  _impl_.tileid_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tileID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tileid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "environmentdata.GetDataResponse.tileID"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .environmentdata.Crater craters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_craters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetDataResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:environmentdata.GetDataResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tileID = 1;
  if (!this->_internal_tileid().empty()) {
    const std::string& _s = this->_internal_tileid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "environmentdata.GetDataResponse.tileID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    const std::string& _s = this->_internal_content();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // repeated .environmentdata.Crater craters = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_craters_size()); i < n; i++) {
    const auto& repfield = this->_internal_craters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:environmentdata.GetDataResponse)
  return target;
}

::size_t GetDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:environmentdata.GetDataResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .environmentdata.Crater craters = 3;
  total_size += 1UL * this->_internal_craters_size();
  for (const auto& msg : this->_internal_craters()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tileID = 1;
  if (!this->_internal_tileid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tileid());
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDataResponse::GetClassData() const { return &_class_data_; }


void GetDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDataResponse*>(&to_msg);
  auto& from = static_cast<const GetDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:environmentdata.GetDataResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_craters()->MergeFrom(from._internal_craters());
  if (!from._internal_tileid().empty()) {
    _this->_internal_set_tileid(from._internal_tileid());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDataResponse::CopyFrom(const GetDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:environmentdata.GetDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataResponse::IsInitialized() const {
  return true;
}

void GetDataResponse::InternalSwap(GetDataResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_craters()->InternalSwap(other->_internal_mutable_craters());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tileid_, lhs_arena,
                                       &other->_impl_.tileid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, lhs_arena,
                                       &other->_impl_.content_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_5fservice_2eproto_getter, &descriptor_table_env_5fservice_2eproto_once,
      file_level_metadata_env_5fservice_2eproto[5]);
}
// ===================================================================

class StartStopPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<StartStopPoints>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartStopPoints, _impl_._has_bits_);
  static const ::environmentdata::Position& start(const StartStopPoints* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::environmentdata::Position& end(const StartStopPoints* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::environmentdata::Position&
StartStopPoints::_Internal::start(const StartStopPoints* msg) {
  return *msg->_impl_.start_;
}
const ::environmentdata::Position&
StartStopPoints::_Internal::end(const StartStopPoints* msg) {
  return *msg->_impl_.end_;
}
StartStopPoints::StartStopPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:environmentdata.StartStopPoints)
}
StartStopPoints::StartStopPoints(const StartStopPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartStopPoints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.start_ = new ::environmentdata::Position(*from._impl_.start_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.end_ = new ::environmentdata::Position(*from._impl_.end_);
  }
  // @@protoc_insertion_point(copy_constructor:environmentdata.StartStopPoints)
}

inline void StartStopPoints::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
  };
}

StartStopPoints::~StartStopPoints() {
  // @@protoc_insertion_point(destructor:environmentdata.StartStopPoints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartStopPoints::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_;
  if (this != internal_default_instance()) delete _impl_.end_;
}

void StartStopPoints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartStopPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:environmentdata.StartStopPoints)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_ != nullptr);
      _impl_.start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_ != nullptr);
      _impl_.end_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartStopPoints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .environmentdata.Position start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .environmentdata.Position end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartStopPoints::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:environmentdata.StartStopPoints)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .environmentdata.Position start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start(this),
        _Internal::start(this).GetCachedSize(), target, stream);
  }

  // .environmentdata.Position end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:environmentdata.StartStopPoints)
  return target;
}

::size_t StartStopPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:environmentdata.StartStopPoints)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .environmentdata.Position start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_);
    }

    // .environmentdata.Position end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartStopPoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartStopPoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartStopPoints::GetClassData() const { return &_class_data_; }


void StartStopPoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartStopPoints*>(&to_msg);
  auto& from = static_cast<const StartStopPoints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:environmentdata.StartStopPoints)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_start()->::environmentdata::Position::MergeFrom(
          from._internal_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end()->::environmentdata::Position::MergeFrom(
          from._internal_end());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartStopPoints::CopyFrom(const StartStopPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:environmentdata.StartStopPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartStopPoints::IsInitialized() const {
  return true;
}

void StartStopPoints::InternalSwap(StartStopPoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartStopPoints, _impl_.end_)
      + sizeof(StartStopPoints::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(StartStopPoints, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartStopPoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_5fservice_2eproto_getter, &descriptor_table_env_5fservice_2eproto_once,
      file_level_metadata_env_5fservice_2eproto[6]);
}
// ===================================================================

class RoutePoints::_Internal {
 public:
};

RoutePoints::RoutePoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:environmentdata.RoutePoints)
}
RoutePoints::RoutePoints(const RoutePoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutePoints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){from._impl_.pos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:environmentdata.RoutePoints)
}

inline void RoutePoints::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutePoints::~RoutePoints() {
  // @@protoc_insertion_point(destructor:environmentdata.RoutePoints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutePoints::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_pos()->~RepeatedPtrField();
}

void RoutePoints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutePoints::Clear() {
// @@protoc_insertion_point(message_clear_start:environmentdata.RoutePoints)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_pos()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutePoints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .environmentdata.Position pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RoutePoints::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:environmentdata.RoutePoints)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .environmentdata.Position pos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pos_size()); i < n; i++) {
    const auto& repfield = this->_internal_pos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:environmentdata.RoutePoints)
  return target;
}

::size_t RoutePoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:environmentdata.RoutePoints)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .environmentdata.Position pos = 1;
  total_size += 1UL * this->_internal_pos_size();
  for (const auto& msg : this->_internal_pos()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutePoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutePoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutePoints::GetClassData() const { return &_class_data_; }


void RoutePoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutePoints*>(&to_msg);
  auto& from = static_cast<const RoutePoints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:environmentdata.RoutePoints)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_pos()->MergeFrom(from._internal_pos());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutePoints::CopyFrom(const RoutePoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:environmentdata.RoutePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutePoints::IsInitialized() const {
  return true;
}

void RoutePoints::InternalSwap(RoutePoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_pos()->InternalSwap(other->_internal_mutable_pos());
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutePoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_5fservice_2eproto_getter, &descriptor_table_env_5fservice_2eproto_once,
      file_level_metadata_env_5fservice_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace environmentdata
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::environmentdata::CraterArea*
Arena::CreateMaybeMessage< ::environmentdata::CraterArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::environmentdata::CraterArea >(arena);
}
template<> PROTOBUF_NOINLINE ::environmentdata::Position*
Arena::CreateMaybeMessage< ::environmentdata::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::environmentdata::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::environmentdata::Area*
Arena::CreateMaybeMessage< ::environmentdata::Area >(Arena* arena) {
  return Arena::CreateMessageInternal< ::environmentdata::Area >(arena);
}
template<> PROTOBUF_NOINLINE ::environmentdata::Crater*
Arena::CreateMaybeMessage< ::environmentdata::Crater >(Arena* arena) {
  return Arena::CreateMessageInternal< ::environmentdata::Crater >(arena);
}
template<> PROTOBUF_NOINLINE ::environmentdata::GetDataRequest*
Arena::CreateMaybeMessage< ::environmentdata::GetDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::environmentdata::GetDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::environmentdata::GetDataResponse*
Arena::CreateMaybeMessage< ::environmentdata::GetDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::environmentdata::GetDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::environmentdata::StartStopPoints*
Arena::CreateMaybeMessage< ::environmentdata::StartStopPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::environmentdata::StartStopPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::environmentdata::RoutePoints*
Arena::CreateMaybeMessage< ::environmentdata::RoutePoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::environmentdata::RoutePoints >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
