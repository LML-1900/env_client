// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: env_service.proto
#ifndef GRPC_env_5fservice_2eproto__INCLUDED
#define GRPC_env_5fservice_2eproto__INCLUDED

#include "env_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace environmentdata {

// Interface exported by the server.
class EnvironmentData final {
 public:
  static constexpr char const* service_full_name() {
    return "environmentdata.EnvironmentData";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::environmentdata::GetDataResponse>> GetData(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::environmentdata::GetDataResponse>>(GetDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::environmentdata::GetDataResponse>> AsyncGetData(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::environmentdata::GetDataResponse>>(AsyncGetDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::environmentdata::GetDataResponse>> PrepareAsyncGetData(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::environmentdata::GetDataResponse>>(PrepareAsyncGetDataRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateCrater(::grpc::ClientContext* context, const ::environmentdata::Crater& request, ::environmentdata::CraterArea* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::environmentdata::CraterArea>> AsyncUpdateCrater(::grpc::ClientContext* context, const ::environmentdata::Crater& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::environmentdata::CraterArea>>(AsyncUpdateCraterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::environmentdata::CraterArea>> PrepareAsyncUpdateCrater(::grpc::ClientContext* context, const ::environmentdata::Crater& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::environmentdata::CraterArea>>(PrepareAsyncUpdateCraterRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRoutePoints(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints& request, ::environmentdata::RoutePoints* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::environmentdata::RoutePoints>> AsyncGetRoutePoints(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::environmentdata::RoutePoints>>(AsyncGetRoutePointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::environmentdata::RoutePoints>> PrepareAsyncGetRoutePoints(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::environmentdata::RoutePoints>>(PrepareAsyncGetRoutePointsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetData(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest* request, ::grpc::ClientReadReactor< ::environmentdata::GetDataResponse>* reactor) = 0;
      virtual void UpdateCrater(::grpc::ClientContext* context, const ::environmentdata::Crater* request, ::environmentdata::CraterArea* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateCrater(::grpc::ClientContext* context, const ::environmentdata::Crater* request, ::environmentdata::CraterArea* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRoutePoints(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints* request, ::environmentdata::RoutePoints* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRoutePoints(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints* request, ::environmentdata::RoutePoints* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::environmentdata::GetDataResponse>* GetDataRaw(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::environmentdata::GetDataResponse>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::environmentdata::GetDataResponse>* PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::environmentdata::CraterArea>* AsyncUpdateCraterRaw(::grpc::ClientContext* context, const ::environmentdata::Crater& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::environmentdata::CraterArea>* PrepareAsyncUpdateCraterRaw(::grpc::ClientContext* context, const ::environmentdata::Crater& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::environmentdata::RoutePoints>* AsyncGetRoutePointsRaw(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::environmentdata::RoutePoints>* PrepareAsyncGetRoutePointsRaw(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::environmentdata::GetDataResponse>> GetData(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::environmentdata::GetDataResponse>>(GetDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::environmentdata::GetDataResponse>> AsyncGetData(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::environmentdata::GetDataResponse>>(AsyncGetDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::environmentdata::GetDataResponse>> PrepareAsyncGetData(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::environmentdata::GetDataResponse>>(PrepareAsyncGetDataRaw(context, request, cq));
    }
    ::grpc::Status UpdateCrater(::grpc::ClientContext* context, const ::environmentdata::Crater& request, ::environmentdata::CraterArea* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::environmentdata::CraterArea>> AsyncUpdateCrater(::grpc::ClientContext* context, const ::environmentdata::Crater& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::environmentdata::CraterArea>>(AsyncUpdateCraterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::environmentdata::CraterArea>> PrepareAsyncUpdateCrater(::grpc::ClientContext* context, const ::environmentdata::Crater& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::environmentdata::CraterArea>>(PrepareAsyncUpdateCraterRaw(context, request, cq));
    }
    ::grpc::Status GetRoutePoints(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints& request, ::environmentdata::RoutePoints* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::environmentdata::RoutePoints>> AsyncGetRoutePoints(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::environmentdata::RoutePoints>>(AsyncGetRoutePointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::environmentdata::RoutePoints>> PrepareAsyncGetRoutePoints(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::environmentdata::RoutePoints>>(PrepareAsyncGetRoutePointsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetData(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest* request, ::grpc::ClientReadReactor< ::environmentdata::GetDataResponse>* reactor) override;
      void UpdateCrater(::grpc::ClientContext* context, const ::environmentdata::Crater* request, ::environmentdata::CraterArea* response, std::function<void(::grpc::Status)>) override;
      void UpdateCrater(::grpc::ClientContext* context, const ::environmentdata::Crater* request, ::environmentdata::CraterArea* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRoutePoints(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints* request, ::environmentdata::RoutePoints* response, std::function<void(::grpc::Status)>) override;
      void GetRoutePoints(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints* request, ::environmentdata::RoutePoints* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::environmentdata::GetDataResponse>* GetDataRaw(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request) override;
    ::grpc::ClientAsyncReader< ::environmentdata::GetDataResponse>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::environmentdata::GetDataResponse>* PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::environmentdata::GetDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::environmentdata::CraterArea>* AsyncUpdateCraterRaw(::grpc::ClientContext* context, const ::environmentdata::Crater& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::environmentdata::CraterArea>* PrepareAsyncUpdateCraterRaw(::grpc::ClientContext* context, const ::environmentdata::Crater& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::environmentdata::RoutePoints>* AsyncGetRoutePointsRaw(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::environmentdata::RoutePoints>* PrepareAsyncGetRoutePointsRaw(::grpc::ClientContext* context, const ::environmentdata::StartStopPoints& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetData_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCrater_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRoutePoints_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetData(::grpc::ServerContext* context, const ::environmentdata::GetDataRequest* request, ::grpc::ServerWriter< ::environmentdata::GetDataResponse>* writer);
    virtual ::grpc::Status UpdateCrater(::grpc::ServerContext* context, const ::environmentdata::Crater* request, ::environmentdata::CraterArea* response);
    virtual ::grpc::Status GetRoutePoints(::grpc::ServerContext* context, const ::environmentdata::StartStopPoints* request, ::environmentdata::RoutePoints* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::environmentdata::GetDataRequest* /*request*/, ::grpc::ServerWriter< ::environmentdata::GetDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetData(::grpc::ServerContext* context, ::environmentdata::GetDataRequest* request, ::grpc::ServerAsyncWriter< ::environmentdata::GetDataResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCrater : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateCrater() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateCrater() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCrater(::grpc::ServerContext* /*context*/, const ::environmentdata::Crater* /*request*/, ::environmentdata::CraterArea* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCrater(::grpc::ServerContext* context, ::environmentdata::Crater* request, ::grpc::ServerAsyncResponseWriter< ::environmentdata::CraterArea>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRoutePoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRoutePoints() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetRoutePoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoutePoints(::grpc::ServerContext* /*context*/, const ::environmentdata::StartStopPoints* /*request*/, ::environmentdata::RoutePoints* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoutePoints(::grpc::ServerContext* context, ::environmentdata::StartStopPoints* request, ::grpc::ServerAsyncResponseWriter< ::environmentdata::RoutePoints>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetData<WithAsyncMethod_UpdateCrater<WithAsyncMethod_GetRoutePoints<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetData() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::environmentdata::GetDataRequest, ::environmentdata::GetDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::environmentdata::GetDataRequest* request) { return this->GetData(context, request); }));
    }
    ~WithCallbackMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::environmentdata::GetDataRequest* /*request*/, ::grpc::ServerWriter< ::environmentdata::GetDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::environmentdata::GetDataResponse>* GetData(
      ::grpc::CallbackServerContext* /*context*/, const ::environmentdata::GetDataRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateCrater : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateCrater() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::environmentdata::Crater, ::environmentdata::CraterArea>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::environmentdata::Crater* request, ::environmentdata::CraterArea* response) { return this->UpdateCrater(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateCrater(
        ::grpc::MessageAllocator< ::environmentdata::Crater, ::environmentdata::CraterArea>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::environmentdata::Crater, ::environmentdata::CraterArea>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateCrater() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCrater(::grpc::ServerContext* /*context*/, const ::environmentdata::Crater* /*request*/, ::environmentdata::CraterArea* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCrater(
      ::grpc::CallbackServerContext* /*context*/, const ::environmentdata::Crater* /*request*/, ::environmentdata::CraterArea* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRoutePoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRoutePoints() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::environmentdata::StartStopPoints, ::environmentdata::RoutePoints>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::environmentdata::StartStopPoints* request, ::environmentdata::RoutePoints* response) { return this->GetRoutePoints(context, request, response); }));}
    void SetMessageAllocatorFor_GetRoutePoints(
        ::grpc::MessageAllocator< ::environmentdata::StartStopPoints, ::environmentdata::RoutePoints>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::environmentdata::StartStopPoints, ::environmentdata::RoutePoints>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRoutePoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoutePoints(::grpc::ServerContext* /*context*/, const ::environmentdata::StartStopPoints* /*request*/, ::environmentdata::RoutePoints* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRoutePoints(
      ::grpc::CallbackServerContext* /*context*/, const ::environmentdata::StartStopPoints* /*request*/, ::environmentdata::RoutePoints* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetData<WithCallbackMethod_UpdateCrater<WithCallbackMethod_GetRoutePoints<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::environmentdata::GetDataRequest* /*request*/, ::grpc::ServerWriter< ::environmentdata::GetDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCrater : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateCrater() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateCrater() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCrater(::grpc::ServerContext* /*context*/, const ::environmentdata::Crater* /*request*/, ::environmentdata::CraterArea* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRoutePoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRoutePoints() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetRoutePoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoutePoints(::grpc::ServerContext* /*context*/, const ::environmentdata::StartStopPoints* /*request*/, ::environmentdata::RoutePoints* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::environmentdata::GetDataRequest* /*request*/, ::grpc::ServerWriter< ::environmentdata::GetDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateCrater : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateCrater() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateCrater() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCrater(::grpc::ServerContext* /*context*/, const ::environmentdata::Crater* /*request*/, ::environmentdata::CraterArea* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCrater(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRoutePoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRoutePoints() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetRoutePoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoutePoints(::grpc::ServerContext* /*context*/, const ::environmentdata::StartStopPoints* /*request*/, ::environmentdata::RoutePoints* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoutePoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetData() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetData(context, request); }));
    }
    ~WithRawCallbackMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::environmentdata::GetDataRequest* /*request*/, ::grpc::ServerWriter< ::environmentdata::GetDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateCrater : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateCrater() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateCrater(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateCrater() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCrater(::grpc::ServerContext* /*context*/, const ::environmentdata::Crater* /*request*/, ::environmentdata::CraterArea* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCrater(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRoutePoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRoutePoints() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRoutePoints(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRoutePoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoutePoints(::grpc::ServerContext* /*context*/, const ::environmentdata::StartStopPoints* /*request*/, ::environmentdata::RoutePoints* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRoutePoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCrater : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateCrater() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::environmentdata::Crater, ::environmentdata::CraterArea>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::environmentdata::Crater, ::environmentdata::CraterArea>* streamer) {
                       return this->StreamedUpdateCrater(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateCrater() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCrater(::grpc::ServerContext* /*context*/, const ::environmentdata::Crater* /*request*/, ::environmentdata::CraterArea* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCrater(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::environmentdata::Crater,::environmentdata::CraterArea>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRoutePoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRoutePoints() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::environmentdata::StartStopPoints, ::environmentdata::RoutePoints>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::environmentdata::StartStopPoints, ::environmentdata::RoutePoints>* streamer) {
                       return this->StreamedGetRoutePoints(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRoutePoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRoutePoints(::grpc::ServerContext* /*context*/, const ::environmentdata::StartStopPoints* /*request*/, ::environmentdata::RoutePoints* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRoutePoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::environmentdata::StartStopPoints,::environmentdata::RoutePoints>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UpdateCrater<WithStreamedUnaryMethod_GetRoutePoints<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::environmentdata::GetDataRequest, ::environmentdata::GetDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::environmentdata::GetDataRequest, ::environmentdata::GetDataResponse>* streamer) {
                       return this->StreamedGetData(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::environmentdata::GetDataRequest* /*request*/, ::grpc::ServerWriter< ::environmentdata::GetDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetData(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::environmentdata::GetDataRequest,::environmentdata::GetDataResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetData<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetData<WithStreamedUnaryMethod_UpdateCrater<WithStreamedUnaryMethod_GetRoutePoints<Service > > > StreamedService;
};

}  // namespace environmentdata


#endif  // GRPC_env_5fservice_2eproto__INCLUDED
